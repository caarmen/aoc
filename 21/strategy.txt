* âœ… Create a data structure for the numeric keypad:
  - Grid of cells.
  - Current row/col, initially at the A position (4,3).
  - List of buttons pressed so far.
+---+---+---+
| 7 | 8 | 9 |
+---+---+---+
| 4 | 5 | 6 |
+---+---+---+
| 1 | 2 | 3 |
+---+---+---+
    | 0 | A |
    +---+---+
* âœ…  Create a data structure for the directional keypad:
  - Grid of cells.
  - Current row/col, initially at the A position (4,3).
  - List of buttons pressed so far.
  - Reference to the next keypad it's controlling (could be directional or numeric).
    +---+---+
    | ^ | A |
+---+---+---+
| < | v | > |
+---+---+---+

ðŸ‘‰ Change: Used the same data structure for both keypad types

* âœ… Create a program USE-NUMERIC-KEYPAD:
  - Input:
    - a numeric keypad
    - an action (coming from a directional keypad): <,v,^,>, or A
  - Action:
    - mutates the state of the numeric keypad:
      - For a direction, update the current row/col.
      - For A, append to the list of buttons pressed so far.
* âœ… Create a program USE-DIRECTIONAL-KEYPAD:
  - Input:
    - a directional keypad
    - the next keypad
    - an action (coming from a directional keypad): <,v,^,>, or A
  - Action:
    - mutates the state of the directional keypad:
      - For a direction, update the current row/col.
      - For A:
        - append to the list of buttons pressed so far.
        - Send the value of the last row/col to the next keypad.
ðŸ‘‰ Change: Used the same program for both keypad types

* âœ… Create a program for debugging the numeric keypad: 
  - Name: USE-NUMERIC-KEYPAD-SEQUENCE.
  - Setup:
    - One numeric keypad.
  - Input: a sequence of directional keys.
  - Action:
    - Apply each character in the input screen to the directional keypad
    - Verify the state of the numeric keypad at the end.
  - Examples:
    - Input: <A^A>^^AvvvA
    - Expected list of buttons pressed: 029A

* âœ… Create a program for debugging the directional keypad: 
  - Name: USE-DIRECTIONAL-KEYPAD1-SEQUENCE.
  - Setup:
    - One numeric keypad.
    - One directional keypad controlling the numeric keypad.
  - Input: a sequence of directional keys.
  - Action:
    - Apply each character in the input screen to the directional keypad
    - Verify the state of the numeric keypad at the end.
  - Examples:
    - Input: v<<A>>^A<A>AvA<^AA>A<vAAA>^A
    - Expected list of numeric buttons pressed: 029A

* âœ… Create a program for debugging the 2nd directional keypad:
  - Name: USE-DIRECTIONAL-KEYPAD2-SEQUENCE.
  - Setup:
    - One numeric keypad.
    - One directional keypad DK1 controlling the numeric keypad.
    - One directional keypad DK2 controlling DK1.
  - Input: a sequence of directional keys.
  - Action:
    - Apply each character in the input screen to DK2.
    - Verify the state of the numeric keypad at the end.
  - Examples:
    - Input: <vA<AA>>^AvAA<^A>A<v<A>>^AvA^A<vA>^A<v<A>^A>AAvA^A<v<A>A>^AAAvA<^A>A
    - Expected list of numeric buttons pressed: 029A

ðŸ‘‰ Change: Used the same test for both keypad types

* âœ… Create a program for debugging the 3rd directional keypad:
  - Name: USE-DIRECTIONAL-KEYPAD3-SEQUENCE.
  - Setup:
    - One numeric keypad.
    - One directional keypad DK1 controlling the numeric keypad.
    - One directional keypad DK2 controlling DK1.
    - One directional keypad DK3 controlling DK2.
  - Input: a sequence of directional keys.
  - Action:
    - Apply each character in the input screen to DK3.
    - Verify the state of the numeric keypad at the end.
  - Examples:
    - Input: <vA<AA>>^AvAA<^A>A<v<A>>^AvA^A<vA>^A<v<A>^A>AAvA^A<v<A>A>^AAAvA<^A>A
v<<A>>^A<A>AvA<^AA>A<vAAA>^A
<A^A>^^AvvvA
    - Expected list of numeric buttons pressed: 029A

ðŸ‘‰ Change: Used the same test for all keypads

* Create a program for finding the shortest path for a given target numeric sequence.
  - Name: COMPUTE-COMPLEXITY
  - Setup:
    - A queue of key sequences to press.
    - A set of visited sequences.
  - Input:
    - One numeric keypad.
    - One directional keypad DK1 controlling the numeric keypad.
    - One directional keypad DK2 controlling DK1.
    - One directional keypad DK3 controlling DK2.
  - Output:
    - The complexity calculation.
  - Action:
    - Enqueue a sequence of <.
    - While the queue isn't empty: 
      - Dequeue the key sequence.
      - Reinit all the keypads.
      - Apply this key sequence to DK3.
      - Check the list of numbers pressed of the numeric keypad.
        - If the numbers pressed is the target:
          - Calculate the complexity: Sequence length * numeric value of the target key sequence.
          - EXIT
        - If the numbers pressed is a substring of the target:
          - For each neighboring key in DK3 to its current row/col:
            - Create a sequence with the current sequence and this key appended
            - If this sequence isn't already visited:
              - Mark the sequence as visited.
              - Enqueue the sequence.


* Main:
  - Setup:
    - One numeric keypad.
    - One directional keypad DK1 controlling the numeric keypad.
    - One directional keypad DK2 controlling DK1.
    - One directional keypad DK3 controlling DK2.
    - A complexity total, initially 0.
  - Action:
    - For each numerical sequence in the input:
      - Reset the keypads.
      - Call COMPUTE-COMPLEXITY for this sequence.
      - Add the result to the complexity total
    - Print the complexity total.

